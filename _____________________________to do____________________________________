TO DO -------------------------------------------------------------
update multilabel_classifier for taking multiple metrics
    it can take multimetrics and returns both
    
find the most effective embedding method and add to the algorithm
  
try different similarity metrics

sınıf içi similarity hesaplarken:
    bütün sınıfı değerlendirmek yerine sadece kaliteli instance ları değerlendirsek?
        kaliteli instance ları nasıl bulacağız?

sadece similarity yeterli mi?
    diğer sınıflara olan uzaklağa da bakmak gerekli mi?
    diğer sınıflara ya yakın olsun? ya da oldukça uzak. ortada bir yerde olmasın

new instance bulurken 
    en yüksek similarity e sahip olan yerine overall iyiliğe bakılabilir mi?

define a stopping condition
- now num of req instances to balance a class is calculated and split into batches but a batch is added if it improves the f1, it may not add instance
- it should be like, I searched all the data and stop if no improvement, or iteration

diğer sınıfların labellarını bulurken sadece class_similarity üzerinden bir kıyaslama yapılıyor, threshold ile çarpım yapılmıyor
    deneme yaparken değiştir, threshold u ekle

stopping condition
- calculate similarity as average and multiply it with a threshold, this threshold should be defined for every class

notes:
-during oversampling we calculate class similarities only with labeled set and we use it in each iteration during oversampling
recalculating it in each iteration after new instances are added may help!





DONE ---------------------------------------------------------------------------------------

if update_type == 'increase':
    similarity_factor = similarity_factor + ((1-similarity_factor)**2) * similarity_factor
elif update_type == 'decrease':
    similarity_factor = similarity_factor - ((1-similarity_factor)**2) * similarity_factor

balancing mechanism 
    + averaging and multiplying with a threshold_factor
    + 0.75 quartile

similairty-distance relation 
    +from Applied multivariate statistical analysis
        s = 1/(1+d)
Parameters
    calculation_type - category
        'average' : calculates avg. similarity
        'safe_interval' : finds 0.75 quartile
    batch_size - int
        -1 : finds all possible instances
        >0 : uses batchs





